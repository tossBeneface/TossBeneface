plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.app'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
	maven { url "https://repo.maven.apache.org/maven2" } // 필요한 경우 추가
	google() // Android 프로젝트가 아니더라도 종종 유용함
}

ext {
	set('springCloudVersion', "2023.0.3")
}

dependencies {
	// Spring Boot 기본 의존성
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.3'
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'
	implementation 'org.apache.commons:commons-text:1.8'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 처리에 필요

	// QueryDSL Dependencies
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta' // QueryDSL JPA
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta' // Annotation Processor
//	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Jakarta EE
	implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
	implementation "jakarta.persistence:jakarta.persistence-api:3.1.0"
	implementation "jakarta.annotation:jakarta.annotation-api:2.1.1"

	// Jackson
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2' // 최신 안정 버전 사용
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	// ANTLR 버전을 명시적으로 정의
	implementation 'org.antlr:antlr4-runtime:4.10.1' // QueryDSL이 사용하는 버전에 맞춤
	annotationProcessor 'org.antlr:antlr4:4.10.1'   // 이 버전도 동일하게 설정

	// Hibernate 최신 버전
	implementation 'org.hibernate.orm:hibernate-core:6.2.10.Final'

	// AWS SDK
	implementation 'software.amazon.awssdk:s3:2.20.59' // AWS SDK
	implementation 'software.amazon.awssdk:core:2.20.59' // AWS Core

	// Jasypt for encryption
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	// Tomcat
	implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.30'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// H2 Database for testing
	runtimeOnly 'com.h2database:h2'

	// Mysql
	implementation 'mysql:mysql-connector-java:8.0.33' // 최신 버전을 확인 후 사용
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Json
	implementation 'org.json:json:20210307'

	// SLF4J API
	implementation 'org.slf4j:slf4j-api:2.0.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

def generated = 'src/main/generated'

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}

tasks.named('test') {
	useJUnitPlatform()
}